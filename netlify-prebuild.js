/**
 * Script de pr√©paration pour Netlify
 * 
 * Ce script s'ex√©cute avant le build sur Netlify pour s'assurer que
 * toutes les d√©pendances sont correctement install√©es et disponibles.
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Configuration
console.log('üöÄ D√©but de la pr√©paration Netlify...');
console.log(`üìã Node.js version: ${process.version}`);
console.log(`üìã Environnement: ${process.env.NODE_ENV || 'development'}`);

// Liste des d√©pendances critiques √† v√©rifier explicitement
const CRITICAL_PACKAGES = [
  'react-router-dom',
  'react-i18next',
  'framer-motion',
  '@headlessui/react',
  '@heroicons/react',
  '@stripe/stripe-js',
  '@stripe/react-stripe-js',
  'react-beautiful-dnd',
  'react-chartjs-2',
  'i18next-http-backend',
  'i18next-browser-languagedetector'
];

// V√©rification de r√©pertoire node_modules
console.log('\nüìÇ V√©rification du r√©pertoire node_modules...');
const nodeModulesPath = path.resolve(__dirname, 'node_modules');

if (!fs.existsSync(nodeModulesPath)) {
  console.error('‚ùå Le r√©pertoire node_modules est absent!');
  console.log('üîÑ Installation forc√©e des d√©pendances...');
  execSync('npm ci --no-audit --no-fund', { stdio: 'inherit' });
} else {
  console.log('‚úÖ Le r√©pertoire node_modules existe');
}

// V√©rification et r√©paration des d√©pendances critiques
console.log('\nüîç V√©rification des d√©pendances critiques...');
const missingPackages = [];

CRITICAL_PACKAGES.forEach(pkg => {
  const pkgPath = path.resolve(nodeModulesPath, pkg);
  if (!fs.existsSync(pkgPath)) {
    console.log(`‚ùå ${pkg} est manquant`);
    missingPackages.push(pkg);
  } else {
    console.log(`‚úÖ ${pkg} est pr√©sent`);
  }
});

// R√©installation des packages manquants
if (missingPackages.length > 0) {
  console.log(`\nüîÑ R√©installation des ${missingPackages.length} packages manquants...`);
  try {
    // Force l'installation des packages manquants sans mettre √† jour package.json
    const installCmd = `npm install ${missingPackages.join(' ')} --no-save --legacy-peer-deps`;
    console.log(`Ex√©cution: ${installCmd}`);
    execSync(installCmd, { stdio: 'inherit' });
    console.log('‚úÖ R√©installation termin√©e avec succ√®s');
  } catch (error) {
    console.error('‚ùå Erreur durant la r√©installation:', error);
    // Ne pas faire √©chouer le build complet, mais enregistrer l'erreur
  }
}

// V√©rifier la structure des d√©pendances sp√©cifiques qui posent probl√®me
console.log('\nüîç V√©rification de la structure de react-router-dom...');
const reactRouterPath = path.resolve(nodeModulesPath, 'react-router-dom');
if (fs.existsSync(reactRouterPath)) {
  const files = fs.readdirSync(reactRouterPath);
  console.log(`Files: ${files.join(', ')}`);
  
  // V√©rifier les fichiers principaux
  const indexPath = path.resolve(reactRouterPath, 'index.js');
  const mainPath = path.resolve(reactRouterPath, 'main.js');
  const pkgJsonPath = path.resolve(reactRouterPath, 'package.json');
  
  console.log(`index.js existe: ${fs.existsSync(indexPath)}`);
  console.log(`main.js existe: ${fs.existsSync(mainPath)}`);
  console.log(`package.json existe: ${fs.existsSync(pkgJsonPath)}`);
  
  // Si index.js n'existe pas mais qu'il y a un autre point d'entr√©e, cr√©er un lien symbolique
  if (!fs.existsSync(indexPath)) {
    console.log('Recherche d\'une alternative √† index.js...');
    const distDir = path.resolve(reactRouterPath, 'dist');
    
    if (fs.existsSync(distDir)) {
      console.log('R√©pertoire dist trouv√©, recherche d\'alternatives...');
      const distFiles = fs.readdirSync(distDir);
      console.log(`Fichiers dans dist: ${distFiles.join(', ')}`);
      
      // Chercher un fichier qui pourrait servir d'index
      const indexCandidate = distFiles.find(f => f.includes('index') || f.includes('main') || f.includes('umd'));
      
      if (indexCandidate) {
        console.log(`Alternative trouv√©e: ${indexCandidate}, cr√©ation d'un lien symbolique...`);
        try {
          // Cr√©er un fichier index.js qui importe le fichier trouv√©
          fs.writeFileSync(indexPath, `module.exports = require('./dist/${indexCandidate}');\n`);
          console.log('‚úÖ Lien cr√©√© avec succ√®s');
        } catch (error) {
          console.error('‚ùå Erreur lors de la cr√©ation du lien:', error);
        }
      }
    }
  }
}

// Correction finale: nettoyer le cache npm
console.log('\nüßπ Nettoyage du cache npm pour les d√©pendances probl√©matiques...');
try {
  execSync('npm cache clean --force', { stdio: 'inherit' });
  console.log('‚úÖ Cache npm nettoy√©');
} catch (error) {
  console.error('‚ùå Erreur lors du nettoyage du cache:', error);
}

console.log('\n‚ú® Pr√©paration Netlify termin√©e!');
