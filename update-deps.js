/**
 * Script de mise √† jour des d√©pendances probl√©matiques
 * 
 * Ce script analyse le fichier package.json et remplace automatiquement
 * les d√©pendances obsol√®tes par des versions plus r√©centes compatibles.
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Chemin vers le fichier package.json
const packageJsonPath = path.resolve(__dirname, 'package.json');

console.log('üîç Analyse du fichier package.json...');

// Lire le fichier package.json
let packageJson;
try {
  const packageJsonContent = fs.readFileSync(packageJsonPath, 'utf8');
  packageJson = JSON.parse(packageJsonContent);
} catch (error) {
  console.error('‚ùå Erreur lors de la lecture du fichier package.json:', error);
  process.exit(1);
}

// Liste des d√©pendances √† mettre √† jour avec leurs versions recommand√©es
const dependenciesToUpdate = {
  // D√©pendances principales
  'react-beautiful-dnd': {
    version: '^13.1.1',
    note: 'Package obsol√®te mais encore utilis√©. Ignorer les avertissements.'
  },
  'emailjs-com': {
    version: '^3.2.0',
    note: 'Consid√©rer "@emailjs/browser" dans une future mise √† jour.'
  },
  'spdy': {
    version: '^4.0.2',
    note: 'Package peu maintenu mais encore fonctionnel. √Ä remplacer par une alternative moderne √† l\'avenir.'
  },
  
  // D√©pendances de d√©veloppement
  '@testing-library/react': {
    version: '^16.3.0',
    note: 'Version r√©cente, conserver telle quelle.'
  }
};

// V√©rifier les d√©pendances √† mettre √† jour
let updatesNeeded = false;
console.log('\nüìã V√©rification des d√©pendances probl√©matiques:');

// V√©rifier les d√©pendances principales
for (const [dep, info] of Object.entries(dependenciesToUpdate)) {
  if (packageJson.dependencies && packageJson.dependencies[dep]) {
    console.log(`  ‚Ä¢ ${dep}: ${packageJson.dependencies[dep]} ‚Üí ${info.version} [${info.note}]`);
    if (packageJson.dependencies[dep] !== info.version) {
      packageJson.dependencies[dep] = info.version;
      updatesNeeded = true;
    }
  } else if (packageJson.devDependencies && packageJson.devDependencies[dep]) {
    console.log(`  ‚Ä¢ ${dep}: ${packageJson.devDependencies[dep]} ‚Üí ${info.version} [${info.note}]`);
    if (packageJson.devDependencies[dep] !== info.version) {
      packageJson.devDependencies[dep] = info.version;
      updatesNeeded = true;
    }
  }
}

// Ajouter des r√©solveurs explicites pour les conflits connus
if (!packageJson.resolutions) {
  packageJson.resolutions = {};
  updatesNeeded = true;
}

// R√©soudre les conflits connus
const resolutionsToAdd = {
  'wrap-ansi': '^7.0.0',
  'string-width': '^4.2.3',
  'strip-ansi': '^6.0.1'
};

for (const [pkg, version] of Object.entries(resolutionsToAdd)) {
  if (!packageJson.resolutions[pkg] || packageJson.resolutions[pkg] !== version) {
    packageJson.resolutions[pkg] = version;
    console.log(`  ‚Ä¢ Ajout du r√©solveur pour ${pkg}: ${version}`);
    updatesNeeded = true;
  }
}

// Ajouter ou mettre √† jour les configurations sp√©cifiques √† Netlify
if (!packageJson.engines) {
  packageJson.engines = {};
  updatesNeeded = true;
}

// Sp√©cifier explicitement la version de Node.js
if (!packageJson.engines.node || packageJson.engines.node !== '>=20.0.0') {
  packageJson.engines.node = '>=20.0.0';
  console.log('  ‚Ä¢ Ajout de la sp√©cification explicite de Node.js: >=20.0.0');
  updatesNeeded = true;
}

// Sauvegarder les modifications si n√©cessaire
if (updatesNeeded) {
  console.log('\n‚úèÔ∏è Mise √† jour du fichier package.json...');
  fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2) + '\n');
  console.log('‚úÖ Fichier package.json mis √† jour avec succ√®s!');
} else {
  console.log('\n‚úÖ Aucune mise √† jour n√©cessaire, les d√©pendances sont d√©j√† optimales.');
}

// Ajouter un fichier .npmrc pour configurer npm de mani√®re optimale pour Netlify
const npmrcPath = path.resolve(__dirname, '.npmrc');
const npmrcContent = `
# Configuration NPM optimis√©e pour Netlify
loglevel=error
fund=false
audit=false
strict-peer-dependencies=false
legacy-peer-deps=true
`;

fs.writeFileSync(npmrcPath, npmrcContent.trim() + '\n');
console.log('\n‚úÖ Fichier .npmrc cr√©√© pour optimiser l\'installation des d√©pendances.');

console.log('\nüéâ Processus de mise √† jour des d√©pendances termin√©!');
