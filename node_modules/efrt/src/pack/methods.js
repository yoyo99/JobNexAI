import fns from './fns.js'
import pack from './pack.js'
const NOT_ALLOWED = new RegExp('[0-9A-Z,;!:|Â¦]') //characters banned from entering the trie
// reserved propery names
const internal = {
  _d: true,
  _v: true,
  _c: true,
  _g: true,
  _n: true,
}

const methods = {
  // Insert words from one big string, or from an array.
  insertWords: function (words) {
    if (words === undefined) {
      return
    }
    if (typeof words === 'string') {
      words = words.split(/[^a-zA-Z]+/)
    }
    for (let i = 0; i < words.length; i++) {
      words[i] = words[i].toLowerCase()
    }
    fns.unique(words)
    for (let i = 0; i < words.length; i++) {
      if (words[i].match(NOT_ALLOWED) === null) {
        this.insert(words[i])
      }
    }
  },

  insert: function (word) {
    this._insert(word, this.root)
    const lastWord = this.lastWord
    this.lastWord = word

    const prefix = fns.commonPrefix(word, lastWord)
    if (prefix === lastWord) {
      return
    }

    const freeze = this.uniqueNode(lastWord, word, this.root)
    if (freeze) {
      this.combineSuffixNode(freeze)
    }
  },

  _insert: function (word, node) {
    let prefix, next

    // Duplicate