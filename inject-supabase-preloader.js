/**
 * Script d'injection du pr√©chargeur Supabase
 * 
 * Ce script modifie index.html pour y ajouter le script de pr√©chargement 
 * de Supabase avant le d√©marrage de l'application React.
 */

const fs = require('fs');
const path = require('path');

console.log('üîÑ Injection du pr√©chargeur Supabase...');

const distDir = path.join(__dirname, 'dist');
const indexPath = path.join(distDir, 'index.html');
const preloaderPath = path.join(__dirname, 'preload-supabase.js');

// V√©rifier que les fichiers existent
if (!fs.existsSync(indexPath)) {
  console.error('‚ùå Erreur: index.html non trouv√© dans le r√©pertoire dist');
  process.exit(1);
}

if (!fs.existsSync(preloaderPath)) {
  console.error('‚ùå Erreur: preload-supabase.js non trouv√©');
  process.exit(1);
}

// Lire le contenu des fichiers
let indexHtml = fs.readFileSync(indexPath, 'utf8');
const preloaderContent = fs.readFileSync(preloaderPath, 'utf8');

// V√©rifier si le pr√©chargeur est d√©j√† inject√©
if (indexHtml.includes('Pr√©chargement de Supabase')) {
  console.log('‚úÖ Le pr√©chargeur Supabase est d√©j√† inject√©');
} else {
  // Cr√©er l'√©l√©ment script pour le pr√©chargeur
  const preloaderScript = `<script>\n${preloaderContent}\n</script>`;
  
  // Injecter le script juste avant la fermeture de head
  indexHtml = indexHtml.replace('</head>', `${preloaderScript}\n</head>`);
  
  // √âcrire le fichier modifi√©
  fs.writeFileSync(indexPath, indexHtml);
  console.log('‚úÖ Pr√©chargeur Supabase inject√© avec succ√®s dans index.html');
}

// Copier le script dans le r√©pertoire dist pour les r√©f√©rences externes
fs.copyFileSync(preloaderPath, path.join(distDir, 'preload-supabase.js'));
console.log('‚úÖ Fichier pr√©chargeur copi√© dans dist');

console.log('‚ú® Injection du pr√©chargeur Supabase termin√©e !');
